/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.ItemsPaymentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemsPayment extends TableImpl<ItemsPaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.items_payment</code>
     */
    public static final ItemsPayment ITEMS_PAYMENT = new ItemsPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemsPaymentRecord> getRecordType() {
        return ItemsPaymentRecord.class;
    }

    /**
     * The column <code>public.items_payment.id</code>.
     */
    public final TableField<ItemsPaymentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.items_payment.id_payment</code>.
     */
    public final TableField<ItemsPaymentRecord, Long> ID_PAYMENT = createField(DSL.name("id_payment"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.items_payment.name</code>.
     */
    public final TableField<ItemsPaymentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.items_payment.cost</code>.
     */
    public final TableField<ItemsPaymentRecord, Double> COST = createField(DSL.name("cost"), SQLDataType.DOUBLE, this, "");

    private ItemsPayment(Name alias, Table<ItemsPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItemsPayment(Name alias, Table<ItemsPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.items_payment</code> table reference
     */
    public ItemsPayment(String alias) {
        this(DSL.name(alias), ITEMS_PAYMENT);
    }

    /**
     * Create an aliased <code>public.items_payment</code> table reference
     */
    public ItemsPayment(Name alias) {
        this(alias, ITEMS_PAYMENT);
    }

    /**
     * Create a <code>public.items_payment</code> table reference
     */
    public ItemsPayment() {
        this(DSL.name("items_payment"), null);
    }

    public <O extends Record> ItemsPayment(Table<O> child, ForeignKey<O, ItemsPaymentRecord> key) {
        super(child, key, ITEMS_PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ItemsPaymentRecord, Long> getIdentity() {
        return (Identity<ItemsPaymentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ItemsPaymentRecord> getPrimaryKey() {
        return Keys.ITEMS_PAYMENT_PKEY;
    }

    @Override
    public List<ForeignKey<ItemsPaymentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ITEMS_PAYMENT__ITEMS_PAYMENT_ID_PAYMENT_FKEY);
    }

    private transient Payment _payment;

    /**
     * Get the implicit join path to the <code>public.payment</code> table.
     */
    public Payment payment() {
        if (_payment == null)
            _payment = new Payment(this, Keys.ITEMS_PAYMENT__ITEMS_PAYMENT_ID_PAYMENT_FKEY);

        return _payment;
    }

    @Override
    public ItemsPayment as(String alias) {
        return new ItemsPayment(DSL.name(alias), this);
    }

    @Override
    public ItemsPayment as(Name alias) {
        return new ItemsPayment(alias, this);
    }

    @Override
    public ItemsPayment as(Table<?> alias) {
        return new ItemsPayment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemsPayment rename(String name) {
        return new ItemsPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemsPayment rename(Name name) {
        return new ItemsPayment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemsPayment rename(Table<?> name) {
        return new ItemsPayment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super String, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super String, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
